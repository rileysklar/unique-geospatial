---
import Icon from "./Icon.astro";
---

<theme-toggle class="theme-toggle">
  <button class="switcher">
    <span class="sr-only">Dark theme</span>
    <span class="icon light"><Icon icon="sun" /></span>
    <span class="icon dark"><Icon icon="moon-stars" /></span>
  </button>
</theme-toggle>

<style>
  .switcher {
    display: flex;
    justify-content: center;
    border: 0;
    border-radius: 999rem;
    padding: 0;
    background-color: var(--accent-dark);
    box-shadow: inset 0 0 0 1px var(--accent-overlay);
    cursor: pointer;
  }

  .icon {
    z-index: 1;
    position: relative;
    display: flex;
    padding: 0.25rem;
    width: 2rem;
    height: 2rem;
    font-size: 1rem;
    color: var(--gray-light);
    align-items: center;
    justify-content: center;
  }

  .icon.light::before {
    content: "";
    z-index: -1;
    position: absolute;
    inset: 0;
    background-color: var(--accent);
    border-radius: 999rem;
  }

  :global(.theme-dark) .icon.light::before {
    transform: translateX(100%);
  }

  :global(.theme-dark) .icon.dark,
  :global(html:not(.theme-dark)) .icon.light,
  button[aria-pressed="false"] .icon.light {
    color: var(--gray-light);
  }

  @media (prefers-reduced-motion: no-preference) {
    .icon,
    .icon.light::before {
      transition: transform var(--theme-transition),
        color var(--theme-transition);
    }
  }

  @media (forced-colors: active) {
    .icon.light::before {
      background-color: SelectedItem;
    }
  }
</style>

<script>
  class ThemeToggle extends HTMLElement {
    constructor() {
      super();

      const button = this.querySelector("button")!;
      const localStorageKey = "theme";

      /** Set the theme to dark/light mode. */
      const setTheme = (dark: boolean) => {
        document.documentElement.classList[dark ? "add" : "remove"](
          "theme-dark"
        );
        button.setAttribute("aria-pressed", String(dark));

        // Save the theme preference to local storage.
        localStorage.setItem(localStorageKey, String(dark));
      };

      // Check if there is a theme preference in local storage.
      const savedThemePreference = localStorage.getItem(localStorageKey);

      // Determine the initial theme based on local storage or device's media preference.
      const initialTheme =
        savedThemePreference !== null
          ? savedThemePreference === "true"
          : window.matchMedia("(prefers-color-scheme: dark)").matches;

      // Set the initial theme.
      setTheme(initialTheme);

      // Toggle the theme when a user clicks the button.
      button.addEventListener("click", () => setTheme(!this.isDark()));
    }

    isDark() {
      return document.documentElement.classList.contains("theme-dark");
    }
  }

  customElements.define("theme-toggle", ThemeToggle);
</script>
